######################### Kuiper Configuration File #########################
#
# [MINIMAL] - this is the default configuration
# Contains only mandatory packages for minimum functionality.
# This image can be customized by adding one or more of the following libraries and tools.
#
# Set the architecture for Kuiper. Options: armhf (for 32 bits), arm64 (for 64 bits).
TARGET_ARCHITECTURE=arm64
#
# Set the Debian version for Kuiper. Options: bullseye, bookworm.
DEBIAN_VERSION=bookworm
#
# Preserve the Docker container.
PRESERVE_CONTAINER=n
#
# Set the name of the Docker container. By default the name of the container will be 'debian_<DEBIAN_VERSION>_rootfs_container'
#CONTAINER_NAME=debian_bookworm_rootfs_container
#
#
#
# [DESKTOP ENVIRONMENT]
# Contains XFCE4 desktop environment and X11VNC server.
CONFIG_DESKTOP=y
#
#
#
# [LIBIIO]
# Libiio is an Analog Devices library for interfacing with Linux IIO devices.
# Github: https://github.com/analogdevicesinc/libiio
CONFIG_LIBIIO=n
CONFIG_LIBIIO_CMAKE_ARGS="-DWITH_HWMON=ON \
			-DWITH_SERIAL_BACKEND=ON \
			-DWITH_MAN=ON \
			-DWITH_EXAMPLES=ON \
			-DPYTHON_BINDINGS=ON \
			-DCMAKE_BUILD_TYPE=Release \
			-DCMAKE_COLOR_MAKEFILE=OFF \
			-Bbuild -H."
BRANCH_LIBIIO=libiio-v0
#
#
#
# [PYADI]*
# Pyadi: Analog Devices python interfaces for hardware with Industrial I/O drivers.
# Github: https://github.com/analogdevicesinc/pyadi-iio
# *depends on LIBIIO
CONFIG_PYADI=n
BRANCH_PYADI=main
#
# 
#
# [LIBM2K]*
# Libm2k: library for interfacing with the ADALM2000.
# Github: https://github.com/analogdevicesinc/libm2k
# *depends on LIBIIO
CONFIG_LIBM2K=n
CONFIG_LIBM2K_CMAKE_ARGS="-DENABLE_PYTHON=ON \
			-DENABLE_CSHARP=OFF \
			-DENABLE_EXAMPLES=ON \
			-DENABLE_TOOLS=ON \
			-DINSTALL_UDEV_RULES=ON \
			-Bbuild -H."
BRANCH_LIBM2K=main
#
#
#
# [LIBAD9166 IIO]*
# Libad9166-iio: library used for userspace, which applies calibration gain and offset for a user-given frequency.
# Github: https://github.com/analogdevicesinc/libad9166-iio
# *depends on LIBIIO
CONFIG_LIBAD9166_IIO=n
CONFIG_LIBAD9166_IIO_CMAKE_ARGS="-DCMAKE_INSTALL_PREFIX=/usr \
				-DCMAKE_BUILD_TYPE=Release \
				-DCMAKE_COLOR_MAKEFILE=OFF \
				-DPYTHON_BINDINGS=ON \
				-DWITH_DOC=OFF \
				-Bbuild -H."
BRANCH_LIBAD9166_IIO=libad9166-iio-v0 
#
#
#
# [LIBAD9361 IIO]*
# Libad9361-iio: library used for userspace, which manages multi-chip sync (on platforms (FMCOMMS5) 
# where multiple AD9361 devices are use) and can create AD9361 specific FIR filters on the fly
# Github: https://github.com/analogdevicesinc/libad9361-iio
# *depends on LIBIIO
CONFIG_LIBAD9361_IIO=n
CONFIG_LIBAD9361_IIO_CMAKE_ARGS="-DCMAKE_INSTALL_PREFIX=/usr \
				-DCMAKE_BUILD_TYPE=Release \
				-DCMAKE_COLOR_MAKEFILE=OFF \
				-DPYTHON_BINDINGS=ON \
				-DWITH_DOC=OFF \
				-Bbuild -H."
BRANCH_LIBAD9361_IIO=libad9361-iio-v0
#
#
#
# [IIO OSCILLOSCOPE]*
# The IIO Oscilloscope is a GTK+ application, which demonstrates how to interface various IIO devices 
# to different visualization methods within a Linux system. 
# Github: https://github.com/analogdevicesinc/iio-oscilloscope
# *depends on LIBIIO
# *depends on LIBAD9166
# *depends on LIBAD9361
CONFIG_IIO_OSCILLOSCOPE=n
CONFIG_IIO_OSCILLOSCOPE_CMAKE_ARGS="-DCMAKE_INSTALL_PREFIX=/usr/local \
				-DCMAKE_BUILD_TYPE=Release \
				-DCMAKE_COLOR_MAKEFILE=OFF \
				-Bbuild -H."
BRANCH_IIO_OSCILLOSCOPE=main
#
#
#
# [IIO FM RADIO]
# IIO Fm Radio: simple IIO FM Radio receive example
# Github: https://github.com/analogdevicesinc/iio-fm-radio
CONFIG_IIO_FM_RADIO=n
BRANCH_IIO_FM_RADIO=main
#
#
#
# [FRU TOOLS]
# Fru tools: tools to display/manipulate FMC FRU info
# Github: https://github.com/analogdevicesinc/fru_tools
CONFIG_FRU_TOOLS=n
BRANCH_FRU_TOOLS=main
#
#
#
# [JESD EYE SCAN GTK]*
# JESD Eye Scan Gtk: JESD204 Eye Scan Visualization Utility
# Github: https://github.com/analogdevicesinc/jesd-eye-scan-gtk
# *depends on LIBIIO
CONFIG_JESD_EYE_SCAN_GTK=n
CONFIG_JESD_EYE_SCAN_GTK_CMAKE_ARGS="-DCMAKE_INSTALL_PREFIX=/usr/local \
				-DUSE_LIBIIO=ON \
				-Bbuild -H."
BRANCH_JESD_EYE_SCAN_GTK=main
#
#
#
# [COLORIMETER]*
# Colorimeter: Application to be used with the EVAL-CN0363-PMDZ
# Github: https://github.com/analogdevicesinc/colorimeter
# *depends on LIBIIO
CONFIG_COLORIMETER=n
BRANCH_COLORIMETER=main
#
#
#
# [SCOPY]
# Scopy: a software oscilloscope and signal analysis toolset.
# Github: https://github.com/analogdevicesinc/scopy
CONFIG_SCOPY=n
#
#
#
# [GNURADIO]
# Gnuradio: software development toolkit that provides signal processing blocks to implement software radios.
# Github: https://github.com/gnuradio/gnuradio
CONFIG_GNURADIO=n
#
#
#
# [GRM2K]*
# Grm2k: GNU Radio blocks for ADALM-2000.
# Github: https://github.com/analogdevicesinc/gr-m2k
# *depends on LIBIIO
# *depends on LIBM2K
# *depends on GNURADIO
CONFIG_GRM2K=n
CONFIG_GRM2K_CMAKE_ARGS="-Bbuild -H."
BRANCH_GRM2K=main
#
#
#
# [ADI LINUX SCRIPTS]
# ADI Scripts for Linux images: semi-random collection of small shell scripts which run on various Linux images (on various platforms) which talk to a varity of different ADI boards and parts
# Github: https://github.com/analogdevicesinc/linux_image_ADI-scripts
CONFIG_LINUX_SCRIPTS=n
BRANCH_LINUX_SCRIPTS=kuiper2.0
#
#
#
# [RASPBERRY PI BOOT FILES]
# Contains boot files for Raspberry PI.
CONFIG_RPI_BOOT_FILES=y
BRANCH_RPI_BOOT_FILES=gmsl/rpi-6.13.y
USE_ADI_REPO_RPI_BOOT=n
#
#
#
# [INTEL AND XILINX BOOT FILES]
# Contains boot files for Intel and Xilinx.
CONFIG_XILINX_INTEL_BOOT_FILES=n
RELEASE_XILINX_INTEL_BOOT_FILES=2022_r2
USE_ADI_REPO_CARRIERS_BOOT=y
#
# For armhf:
CONFIG_ARCH_ZYNQ=y
CONFIG_ARCH_ARRIA10=y
CONFIG_ARCH_CYCLONE5=y
#
# For arm64:
CONFIG_ARCH_ZYNQMP=n
CONFIG_ARCH_VERSAL=n
#
#
#
# [PREPARE BOOT FILES]*
# Prepare boot partition with carriers boot files at build time by setting the ADI_EVAL_BOARD and the CARRIER.
# *depends on INTEL AND XILINX BOOT FILES
ADI_EVAL_BOARD=
CARRIER=
#
#
#
# [RASPBERRY PI SPECIFIC PACKAGES]
# Install the following RaspberryPi specific packages: raspi-config, GPIO related (pigpio, python3-gpio, raspi-gpio, python3-rpi.gpio),
# VideoCore debugging related (vcdbg), sense-hat, sense-emu.
INSTALL_RPI_PACKAGES=y
#
#
#
# [EXTRA SCRIPT]
# Customize you Kuiper image by running an extra bash script.
# The 'EXTRA_SCRIPT' variable should have the path to the script you want to run.
# After cloning the repository, the script should be added inside 'adi-kuiper-gen' folder.
# The path should be relative to 'adi-kuiper-gen' folder.
# Example: EXTRA_SCRIPT=stages/07.extra-tweaks/01.extra-scripts/examples/extra-script-example.sh
EXTRA_SCRIPT=stages/07.extra-tweaks/01.extra-scripts/gmsl-extra-script/extra-script.sh
#
#
#
# [SOURCES]
# Contains sources for all packages in the rootfs.
EXPORT_SOURCES=n
#
#
#############################################################################
